/* ----------------------------------------------------------------------- *//**
 *
 * @file prob.sql_in
 *
 * @brief SQL functions for evaluating probability functions
 *
 * @sa For an overview of probability functions, see the module
 *     description \ref grp_prob.
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_prob

@about

Probability-distribution functions.

@sa File prob.sql_in documenting the SQL functions.
*/

/**
 * @brief Chi-squared cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a chi-squared distributed
 *     random variable with \f$ df \f$ as degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_cdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a chi-squared distributed random variable with \f$ df \f$ as degrees of
 *     freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_pdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution quantile function
 *
 * @param p Probability \f$ p \in [0,1] \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     chi-squared distributed random variable with \f$ df \f$ as degrees of
 *     freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_quantile(
    p DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param d_1 Degrees of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degrees of freedom in denominator \f$ d_2 > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Fisher F-distributed
 *     random variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_cdf(
    x DOUBLE PRECISION,
    d_1 DOUBLE PRECISION,
    d_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param d_1 Degrees of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degrees of freedom in denominator \f$ d_2 > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a Fisher F-distributed random variable with parameters \f$ d_1 \f$ and
 *     \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_pdf(
    x DOUBLE PRECISION,
    d_1 DOUBLE PRECISION,
    d_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F quantile function
 *
 * @param p Probability \f$ p \in [0,1] \f$
 * @param d_1 Degrees of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degrees of freedom in denominator \f$ d_2 > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     Fisher F-distributed random variable with parameters \f$ d_1 \f$ and
 *     \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_quantile(
    p DOUBLE PRECISION,
    d_1 DOUBLE PRECISION,
    d_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Kolmogorov cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Kolmogorov distributed
 *     random variable
 *
 * @sa Kolmogorov-Smirnov test: ks_test()
 */
CREATE FUNCTION MADLIB_SCHEMA.kolmogorov_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param mean Mean \f$ mean \f$
 * @param sd Standard deviation \f$ sd > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ T \f$ is a normally distributed
 *     random variable with mean \f$ mean \f$ and variance \f$ sd^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION /*+ DEFAULT 0 */,
    sd DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_cdf($1, $2, 1)
$$;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_cdf($1, 0, 1)
$$;

/**
 * @brief Normal probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param mean Mean \f$ mean \f$
 * @param sd Standard deviation \f$ sd > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a normally distributed random variable with mean \f$ mean \f$ and
 *     variance \f$ sd^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION /*+ DEFAULT 0 */,
    sd DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_pdf($1, $2, 1)
$$;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_pdf($1, 0, 1)
$$;

/**
 * @brief Normal quantile function
 *
 * @param p Probability \f$ p \in [0,1] \f$
 * @param mean Mean \f$ mean \f$
 * @param sd Standard deviation \f$ sd > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     normally distributed random variable with mean \f$ mean \f$ and
 *     variance \f$ sd^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    p DOUBLE PRECISION,
    mean DOUBLE PRECISION /*+ DEFAULT 0 */,
    sd DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_quantile($1, $2, 1)
$$;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
IMMUTABLE
STRICT
LANGUAGE sql AS $$
    SELECT MADLIB_SCHEMA.normal_quantile($1, 0, 1)
$$;

/**
 * @brief Student's t cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Student's t-distributed
 *     random variable with \f$ df \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_cdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student's t probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a Stundent's t-distributed random variable with \f$ df \f$ degrees of
 *     freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_pdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student's t quantile function
 *
 * @param p Probability \f$ p \in [0,1] \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     Student's t-distributed random variable with \f$ df \f$ degrees of
 *     freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_quantile(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a beta distributed random
 *     variable with \f$ shape_1 \f$ and \f$ shape_2 \f$ as shape parameters 
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_cdf(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of 
 *     a beta random variable with \f$ shape_1 \f$ and \f$ shape_2 \f$ 
 *     shape parameters
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_pdf(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is 
 *     beta distribution random variable with \f$ shape_1 \f$ and \f$ shape_2 \f$ 
 *     shape parameters
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_quantile(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Uniform cumulative distribution function
 *
 * @param Random variate \f$ x \f$
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a uniform distributed random
 *     variable with range \f$ [min, max] \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_cdf(
    x DOUBLE PRECISION,
    min DOUBLE PRECISION,
    max DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Uniform probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a uniform distributed random variable with with range \f$ [min,max] \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_pdf(
    x DOUBLE PRECISION,
    min DOUBLE PRECISION,
    max DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Uniform quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     uniform distributed random variable with range \f$ [min,max] \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_quantile(
    x DOUBLE PRECISION,
    min DOUBLE PRECISION,
    max DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Weibull cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a weibull distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_cdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Weibull probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a weibull distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_pdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Weibull quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     weibull distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_quantile(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$
 * @param upper The upper limit, which conforms \f$ upper > lower \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a triangular distributed random
 *     variable with parameters \f$ lower \f$, \f$ upper \f$ and \f$ mode \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_cdf(
    x DOUBLE PRECISION,
    lower DOUBLE PRECISION,
    mode DOUBLE PRECISION,
    upper DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$
 * @param upper The upper limit, which conforms \f$ upper > lower \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a triangular distributed random variable with parameters \f$ lower \f$, 
 *     \f$ upper \f$ and \f$ mode \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_pdf(
    x DOUBLE PRECISION,
    lower DOUBLE PRECISION,
    mode DOUBLE PRECISION,
    upper DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$
 * @param upper The upper limit, which conforms \f$ upper > lower \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     trianbular distributed random variable with parameters \f$ lower \f$, 
 *     \f$ upper \f$ and \f$ mode \f$ 
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_quantile(
    x DOUBLE PRECISION,
    lower DOUBLE PRECISION,
    mode DOUBLE PRECISION,
    upper DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Rayleigh cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param shape The shape \f$ shape > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a rayleigh distributed random
 *     variable with parameter \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_cdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Rayleigh probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param shape The shape \f$ shape > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a rayleigh distributed random variable with parameter shape
 *     freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_pdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Rayleigh quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param shape The shape \f$ shape > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     rayleigh distributed random variable with parameter \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_quantile(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Pareto cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter \f$ location > 0 \f$
 * @param shape The shape parameter \f$ shape > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a pareto distributed random
 *     variable with parameters \f$ location \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Pareto probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter \f$ location > 0 \f$
 * @param shape The shape parameter \f$ shape > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a pareto distributed random variable with parameters \f$ location \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Pareto quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter \f$ location > 0 \f$
 * @param shape The shape parameter \f$ shape > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     pareto distributed random variable with parameters \f$ location \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    shape DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Student-t cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a non-central student-t distributed
 *     random variable with \f$ df \f$ as the degrees of freedom and \f$ ncp \f$ as
 *	   the non-centrality parameter
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_cdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Student-t probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     non-central student-t distributed random variable with \f$ df \f$ as the degrees of freedom 
 *     and \f$ ncp \f$ as the non-centrality parameter
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_pdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Student-t quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     non-central student-t distributed random variable with \f$ df \f$ as the degrees of freedom 
 *     and \f$ ncp \f$ as the non-centrality parameter
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_quantile(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;



/**
 * @brief Laplace cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a laplace distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Laplace probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a laplace distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Laplace quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     laplace distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a gamma distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_cdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a gamma distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_pdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     gamma distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_quantile(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a bernoulli distributed random
 *     variable with success probability \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_cdf(
    x DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli probability mass function
 *
 * @param x Random variate \f$ x \in {0, 1} \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a bernoulli distributed random variable with success probability \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_pmf(
    x INT4,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     bernoulli distributed random variable with success probability \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_quantile(
    x DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param trials The number of trials \f$ trials >= 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a binomial distributed random
 *     variable with parameters \f$ trials \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_cdf(
    x DOUBLE PRECISION,
    trials INT4,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial probability mass function
 *
 * @param x Random variate \f$ x \f$
 * @param trials The number of trials \f$ trials >= 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a binomial distributed random variable with parameters \f$ trials \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_pmf(
    x INT4,
    trials INT4,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param trials The number of trials \f$ trials >= 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     binomial distributed random variable with parameters \f$ trials \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_quantile(
    x DOUBLE PRECISION,
    trials INT4,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a cauchy distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a cauchy distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     cauchy distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a exponential distributed random
 *     variable with \f$ rate \f$ as the average rate
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_cdf(
    x DOUBLE PRECISION,
    rate DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a exponential distributed random variable with \f$ rate \f$ as the average rate
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_pdf(
    x DOUBLE PRECISION,
    rate DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     exponential distributed random variable with \f$ rate \f$ as the average rate
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_quantile(
    x DOUBLE PRECISION,
    rate DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Extreme Value cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a extreme value distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.extreme_value_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Extreme Value probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a extreme value distributed random variable with \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.extreme_value_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Extreme Value quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     extreme value distributed random variable with \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.extreme_value_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Geometric cumulative distribution function
 *
 * @param x Random variate \f$ x >= 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in (0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a geometric distributed random
 *     variable with \f$ succ\_prob \f$ as the success probability
 */
CREATE FUNCTION MADLIB_SCHEMA.geometric_cdf(
    x DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Geometric probability mass function
 *
 * @param x Random variate \f$ x >= 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in (0,1] \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a geometric distributed random variable with \f$ succ\_prob \f$ as the success probability
 */
CREATE FUNCTION MADLIB_SCHEMA.geometric_pmf(
    x INT4,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Geometric quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param succ_prob Success probability \f$ succ\_prob \in (0,1] \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     geometric distributed random variable with \f$ succ\_prob \f$ as the success probability
 */
CREATE FUNCTION MADLIB_SCHEMA.geometric_quantile(
    x DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Hypergeometric cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param defective The number of \f$ defective \f$ objects in \f$ total \f$ objects
 *	      \f$ defective \in {0, 1, 2, ..., total} \f$
 * @param sample_count The number of items sampled without replacement. \f$ sample\_count \in {1, 2, ..., total} \f$
 * @param total The total number of items. \f$ total \in {1,2,3, ...} \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a hypergeometric distributed random
 *     variable with parameters \f$ defective \f$, \f$ sample\_count \f$ and \f$ total \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.hypergeometric_cdf(
    x DOUBLE PRECISION,
	defective INT4,
	sample_count INT4,
	total INT4
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Hypergeometric probability mass function
 *
 * @param x Random variate 
 *        \f$ x \in {max(0, sample\_count + defective - total), ..., min(defective, sample\_count)} \f$
 * @param defective The number of \f$ defective \f$ objects in \f$ total \f$ objects
 *	      \f$ defective \in {0, 1, 2, ..., total} \f$
 * @param sample_count The number of items sampled without replacement. \f$ sample\_count \in {1, 2, ..., total} \f$
 * @param total The total number of items. \f$ total \in {1,2,3, ...} \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a hypergeometric distributed random variable with 
 *     parameters \f$ defective \f$, \f$ sample\_count \f$ and \f$ total \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.hypergeometric_pmf(
    x INT4,
	defective INT4,
	sample_count INT4,
	total INT4
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Hypergeometric quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param defective The number of \f$ defective \f$ objects in \f$ total \f$ objects
 *	      \f$ defective \in {0, 1, 2, ..., total} \f$
 * @param sample_count The number of items sampled without replacement. \f$ sample\_count \in {1, 2, ..., total} \f$
 * @param total The total number of items. \f$ total \in {1,2,3, ...} \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     hypergeometric distributed random variable with
 *     parameters \f$ defective \f$, \f$ sample\_count \f$ and \f$ total \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.hypergeometric_quantile(
    x DOUBLE PRECISION,
	defective INT4,
	sample_count INT4,
	total INT4
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Inverse Gamma cumulative distribution function
 *
 * @param x Random variate \f$ x > 0 \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a inverse gamma distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.inverse_gamma_cdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Inverse Gamma probability density function
 *
 * @param x Random variate \f$ x > 0 \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a inverse gamma distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.inverse_gamma_pdf(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Inverse Gamma quantile function
 *
 * @param p Probability f$ p \in (0,1] \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     inverse gamma distributed random variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.inverse_gamma_quantile(
    x DOUBLE PRECISION,
    shape DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Log normal cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a lognormal distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.lognormal_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Log normal probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a log normal distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.lognormal_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Log normal quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     log normal distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.lognormal_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Logistic cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a logistic distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.logistic_cdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Logistic probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a logistic distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.logistic_pdf(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Logistic quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param location The location parameter
 * @param scale The scale parameter \f$ scale > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     logistic distributed random variable with parameters \f$ location \f$ and \f$ scale \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.logistic_quantile(
    x DOUBLE PRECISION,
    location DOUBLE PRECISION,
    scale DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Negative binomial cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param successes The number of successful trials \f$ successes > 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a negative_binomial distributed random
 *     variable with parameters \f$ successes \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.negative_binomial_cdf(
    x DOUBLE PRECISION,
    successes DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Negative binomial probability mass function
 *
 * @param x Random variate \f$ x \f$
 * @param successes The number of successful trials \f$ successes > 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a negative binomial distributed random variable with parameters \f$ successes \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.negative_binomial_pmf(
    x INT4,
    successes DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Negative binomial quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param successes The number of successful trials \f$ successes > 0 \f$
 * @param succ_prob Success probability \f$ succ\_prob \in [0,1] \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     negative binomial distributed random variable with parameters \f$ successes \f$ and \f$ succ\_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.negative_binomial_quantile(
    x DOUBLE PRECISION,
    successes DOUBLE PRECISION,
    succ_prob DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Poisson cumulative distribution function
 *
 * @param x Random variate \f$ x >= 0 \f$
 * @param mean Mean occurrence rate \f$ mean > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a poisson distributed random
 *     variable with parameters \f$ mean \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.poisson_cdf(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Poisson probability mass function
 *
 * @param x Random variate \f$ x >= 0 \f$
 * @param mean Mean occurrence rate \f$ mean > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability mass function of
 *     a poisson distributed random variable with parameters \f$ mean \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.poisson_pmf(
    x INT4,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Poisson quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param mean Mean occurrence rate \f$ mean > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     poisson distributed random variable with parameters \f$ mean \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.poisson_quantile(
    x DOUBLE PRECISION,
    mean DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central beta cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp \ge 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a beta distributed random
 *     variable with shape parameters \f$ shape_1 \f$ and \f$ shape_2 \f$
 *     and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_beta_cdf(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central beta probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp \ge 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a non-central beta distributed random variable with shape parameters \f$ shape_1 \f$ and \f$
 *     shape\_2 \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_beta_pdf(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central beta quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param shape_1 Shape \f$ shape_1 > 0 \f$
 * @param shape_2 Shape \f$ shape_2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp \ge 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     non-central beta distributed random variable with shape parameters \f$ shape_1 \f$ and \f$
 *     shape\_2 \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_beta_quantile(
    x DOUBLE PRECISION,
    shape_1 DOUBLE PRECISION,
    shape_2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central chi-squared cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a chi-squared distributed random
 *     variable with degrees of freedom \f$ df \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_chi_squared_cdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central chi-squared distribution probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp > 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a non-central chi-squared distributed random variable with
 *     degrees of freedom \f$ df \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_chi_squared_pdf(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central chi-squared distribution quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param df Degrees of freedom \f$ df > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp > 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     non-central chi-squared distributed random variable with
 *     degrees of freedom \f$ df \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_chi_squared_quantile(
    x DOUBLE PRECISION,
    df DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Fisher F cumulative distribution function
 *
 * @param x Random variate \f$ x \f$
 * @param df1 Degrees of freedom in numerator \f$ df1 > 0 \f$
 * @param df2 Degrees of freedom in denominator \f$ df2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp >= 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Fisher F distributed random
 *     variable with degrees of freedom \f$ df1 \f$ and \f$ df2 \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_f_cdf(
    x DOUBLE PRECISION,
    df1 DOUBLE PRECISION,
    df2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Fisher F probability density function
 *
 * @param x Random variate \f$ x \f$
 * @param df1 Degrees of freedom in numerator \f$ df1 > 0 \f$
 * @param df2 Degrees of freedom in denominator \f$ df2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp >= 0 \f$
 * @return \f$ f(x) \f$ where \f$ f \f$ is the probability density function of
 *     a non-central Fisher F distributed random variable with
 *     degrees of freedom \f$ df1 \f$ and \f$ df2 \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_f_pdf(
    x DOUBLE PRECISION,
    df1 DOUBLE PRECISION,
    df2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Non-central Fisher F quantile function
 *
 * @param p Probability f$ p \in [0,1] \f$
 * @param df1 Degrees of freedom in numerator \f$ df1 > 0 \f$
 * @param df2 Degrees of freedom in denominator \f$ df2 > 0 \f$
 * @param ncp The non-centrality parameter \f$ ncp >= 0 \f$
 * @return \f$ x \f$ such that \f$ p = \Pr[X \leq x] \f$ where \f$ X \f$ is a
 *     Fisher F distributed random variable with
 *     degrees of freedom \f$ df1 \f$ and \f$ df2 \f$ and with non-centrality \f$ ncp \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_f_quantile(
    x DOUBLE PRECISION,
    df1 DOUBLE PRECISION,
    df2 DOUBLE PRECISION,
	ncp DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;
