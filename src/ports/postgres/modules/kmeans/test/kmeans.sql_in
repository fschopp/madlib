-----------------------------------------------------------------------------
---- Rules: 
---- ------
---- Any DB objects should be created w/o schema prefix,
---- since this file is executed in a separate schema context.
-----------------------------------------------------------------------------
--
-----------------------------------------------------------------------------
---- Setup: 
-----------------------------------------------------------------------------
--SELECT setseed( extract( epoch from current_timestamp)-floor( extract( epoch from current_timestamp)));
--
--SELECT * FROM MADLIB_SCHEMA.kmeans_sample_data( 
--    2,      -- # of dimensions
--    10,     -- # of clusters
--    1000,    -- # of points per cluster
--    1000,   -- max value of a cluster coordinate
--    10,     -- average width of a cluster in every dimension
--    'km_testdata'
--);
--
--INSERT INTO km_testdata values ('{1,1}:{19.99,NULL}'::MADLIB_SCHEMA.svec);
--INSERT INTO km_testdata values ('{1,1}:{19.99,-Infinity}'::MADLIB_SCHEMA.svec);
--INSERT INTO km_testdata values ('{1,1}:{19.99,Infinity}'::MADLIB_SCHEMA.svec);
--INSERT INTO km_testdata values ('{1,1}:{19.99,NAN}'::MADLIB_SCHEMA.svec);
--
-----------------------------------------------------------------
---- Test
-----------------------------------------------------------------
---- Run k-means using kmeans++() seeding 
--DROP TABLE IF EXISTS km_points;
--DROP TABLE IF EXISTS km_cents;
--SELECT * FROM MADLIB_SCHEMA.kmeans_plusplus( 
--    'km_testdata'               -- relation 
--    , 'coords', null            -- data col, id col
--    , 'km_points', 'km_cents'   -- out points, out centroids
--    , 'l2norm'                  -- distance metric
--    , 5, 0.001                  -- max iter, convergence threshold
--    , True, True                -- evaluate, verbose
--    , 10, 0.01                  -- k, sample_fraq   			
--);
--
---- Run k-means using random() seeding 
--DROP TABLE IF EXISTS km_points;
--DROP TABLE IF EXISTS km_cents;
--SELECT * FROM MADLIB_SCHEMA.kmeans_random( 
--    'km_testdata'               -- relation 
--    , 'coords', null            -- data col, id col
--    , 'km_points', 'km_cents'   -- out points, out centroids
--    , 'l1norm'                  -- distance metric
--    , 5, 0.001                  -- max iter, convergence threshold
--    , True, True                -- evaluate, verbose
--    , 10                        -- k  			
--);
--
---- Run k-means using canopy() seeding 
--DROP TABLE IF EXISTS km_points;
--DROP TABLE IF EXISTS km_cents;
--SELECT * FROM MADLIB_SCHEMA.kmeans_canopy( 
--    'km_testdata'               -- relation 
--    , 'coords', null            -- data col, id col
--    , 'km_points', 'km_cents'   -- out points, out centroids
--    , 'l1norm'                  -- distance metric
--    , 5, 0.001                  -- max iter, convergence threshold
--    , True, True                -- evaluate, verbose
--    , null, null                -- t1, t2			
--);
--
---- Create a view with FLOAT[] data type
--CREATE VIEW km_testdata_float123 
--AS SELECT coords::float[] AS coords FROM km_testdata;
--
---- Run k-means using prepared centroid set
--CREATE TABLE mycents AS SELECT * FROM km_cents;
--DROP TABLE IF EXISTS km_points;
--DROP TABLE IF EXISTS km_cents;
--SELECT * FROM MADLIB_SCHEMA.kmeans_cset( 
--    'km_testdata_float123'      -- relation 
--    , 'coords', null            -- data col, id col
--    , 'km_points', 'km_cents'   -- out points, out centroids
--    , 'tanimoto'                -- distance metric
--    , 5, 0.001                  -- max iter, convergence threshold
--    , True, True                -- evaluate, verbose
--    , 'mycents', 'coords'       -- init relation, init column
--);
--
---- Show results
--SELECT cid, count(*) FROM km_points GROUP BY 1;

SET search_path = public, madlib;
CREATE TEMPORARY TABLE kmeans_2d(
    id SERIAL,
    x DOUBLE PRECISION,
    y DOUBLE PRECISION,
    position DOUBLE PRECISION[],
    PRIMARY KEY (id)
);

INSERT INTO kmeans_2d(x, y, position)
SELECT
    x, y,
    ARRAY[
        x + random() * 15.0,
        y + random() * 15.0
    ]::DOUBLE PRECISION[] AS position
FROM (
    SELECT
        random() * 100.0 AS x,
        random() * 100.0 AS y
    FROM generate_series(1,10)
) AS centroids, generate_series(1,100) i;

CREATE TEMPORARY TABLE result AS
SELECT * FROM kmeanspp('kmeans_2d', 'id', 'position', 10::SMALLINT);

\a \t \f ' ' \o | gnuplot
SELECT 'set multiplot; set key left top; set xrange [ -10 : 110 ]; set yrange [ -10 : 110 ]';
SELECT 'plot "-" using 1:2 lt 2 title "Random data set"';
SELECT position[1], position[2] FROM kmeans_2d;
SELECT 'e';
SELECT 'set key right top; plot "-" using 1:2 pointsize 2 lt 3 title "Centroids"';
SELECT centroids[col][1], centroids[col][2] FROM result, generate_series(1,10) col;
--SELECT (_state).centroids[col][1], (_state).centroids[col][2] FROM _madlib_kmeans_state, generate_series(1,10) col WHERE _iteration = 0;
--SELECT _state[col][1], _state[col][2] FROM _madlib_kmeanspp_state, generate_series(1,10) col;
SELECT 'e';
\a \t \f \o
